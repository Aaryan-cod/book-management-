#include <fstream>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
using namespace std;

// MyBookstore Class
class MyBookstore {
public:
    void showMenu();
    void addBook();
    void displayBooks();
    void checkBook();
    void updateBook();
    void deleteBook();
};

// Function to display the menus
void MyBookstore::showMenu() {
    system("cls");
    cout << "\n\n\t\t\t\tMY BOOKSTORE MENU";
    cout << "\n\n1. Add a book in the library";
    cout << "\n2. Display the books in the library";
    cout << "\n3. Check for a particular book";
    cout << "\n4. Update a book";
    cout << "\n5. Delete a book";
    cout << "\n6. EXIT";
}

// Function to add a book
void MyBookstore::addBook() {
    system("cls");
    fstream file;
    int numCopies;
    string bookName, authorName, bookID;
    cout << "\n\n\t\t\t\tADD BOOK";
    cout << "\n\nBook ID : ";
    cin >> bookID;
    cout << "\nBook Name : ";
    cin >> bookName;
    cout << "\nAuthor Name : ";
    cin >> authorName;
    cout << "\nNumber of Copies : ";
    cin >> numCopies;

    // Open the file in append or output mode
    file.open("D://book.txt", ios::out | ios::app);
    file << " " << bookID << " "
         << bookName << " " << authorName
         << " " << numCopies << "\n";
    file.close();
}

// Function to display books
void MyBookstore::displayBooks() {
    system("cls");
    fstream file;
    int numCopies;
    string bookName, bookID, authorName;
    cout << "\n\n\t\t\t\t\tALL BOOKS";

    // Open the file in input mode
    file.open("D://book.txt", ios::in);
    if (!file)
        cout << "\n\nFile Opening Error!";
    else {
        cout << "\n\n\nBook ID\t\tBook"
            << "\t\tAuthor\t\tNo. of "
            "Books\n\n";
        file >> bookID >> bookName;
        file >> authorName >> numCopies;

        // Until the end of the file is reached
        while (!file.eof()) {
            cout << " " << bookID
                << "\t\t" << bookName
                << "\t\t" << authorName
                << "\t\t" << numCopies
                << "\n\n";
            file >> bookID >> bookName;
            file >> authorName >> numCopies;
        }

        system("pause");

        // Close the file
        file.close();
    }
}

// Function to check a book
void MyBookstore::checkBook() {
    system("cls");
    fstream file;
    int numCopies, count = 0;
    string bookID, bookName, authorName, inputBookID;

    cout << "\n\n\t\t\t\tCheck for a Particular Book";

    // Open the file in input mode
    file.open("D://book.txt", ios::in);
    if (!file)
        cout << "\n\nFile Opening Error!";
    else {
        cout << "\n\nBook ID : ";
        cin >> inputBookID;
        file >> bookID >> bookName;
        file >> authorName >> numCopies;

        while (!file.eof()) {
            if (inputBookID == bookID) {
                system("cls");
                cout << "\n\n\t\t\t\t"
                    << "Check for a Particular Book";
                cout << "\n\nBook ID : " << bookID;
                cout << "\nName : " << bookName;
                cout << "\nAuthor : " << authorName;
                cout << "\nNo. of Copies : " << numCopies;
                cout << endl << endl;
                count++;
                break;
            }
            file >> bookID >> bookName;
            file >> authorName >> numCopies;
        }
        system("pause");
        file.close();
        if (count == 0)
            cout << "\n\nBook ID Not Found...";
    }
}

// Function to update a book
void MyBookstore::updateBook() {
    system("cls");
    fstream file, file1;
    int numCopies, newNumCopies, count = 0;
    string bookName, newBookName, authorName;
    string newAuthorName, bookIDd, bookID;

    cout << "\n\n\t\t\t\tUpdate Book Record";
    file1.open("D://book1.txt", ios::app | ios::out);
    file.open("D://book.txt", ios::in);
    if (!file)
        cout << "\n\nFile Opening Error!";
    else {
        cout << "\n\nBook ID : ";
        cin >> bookID;
        file >> bookIDd >> bookName;
        file >> authorName >> numCopies;

        // Until the end of the file is reached
        while (!file.eof()) {
            if (bookID == bookIDd) {
                system("cls");
                cout << "\t\t\t\t"
                    << "Update Book Record";
                cout << "\n\nNew Book Name : ";
                cin >> newBookName;
                cout << "\nAuthor Name : ";
                cin >> newAuthorName;
                cout << "\nNo. of Copies : ";
                cin >> newNumCopies;
                file1 << " " << bookID << " "
                    << newBookName << " "
                    << newAuthorName << " " << newNumCopies
                    << "\n\n";
                count++;
            }
            else
                file1 << " " << bookIDd
                    << " " << bookName
                    << " " << authorName
                    << " " << numCopies
                    << "\n\n";
            file >> bookIDd >> bookName;
            file >> authorName >> numCopies;
        }
        if (count == 0)
            cout << "\n\nBook ID"
                << " Not Found...";
    }
    cout << endl;
    system("pause");

    // Close the files
    file.close();
    file1.close();
    remove("D://book.txt");
    rename("D://book1.txt",
        "D://book.txt");
}

// Function to delete a book
void MyBookstore::deleteBook() {
    system("cls");
    fstream file, file1;
    int numCopies, count = 0;
    string bookID, bookIDd, bookName, authorName;
    string inputBookID;

    cout << "\n\n\t\t\t\tDelete a Book";

    // Append file in output mode
    file1.open("D://book1.txt", ios::app | ios::out);
    file.open("D://book.txt", ios::in);

    if (!file)
        cout << "\n\nFile Opening Error...";
    else {
        cout << "\n\nBook ID : ";
        cin >> inputBookID;
        file >> bookIDd >> bookName;
        file >> authorName >> numCopies;

        while (!file.eof()) {

            if (inputBookID == bookIDd) {

                system("cls");
                cout << "\n\n\t\t\t\t"
                    << "Delete a Book";
                cout << "\n\nBook is Deleted "
                    "Successfully...\n\n";
                count++;
            }
            else
                file1 << " " << bookIDd
                    << " " << bookName
                    << " " << authorName
                    << " " << numCopies
                    << "\n\n";
            file >> bookIDd >> bookName;
            file >> authorName >> numCopies;
        }
        if (count == 0)
            cout << "\n\nBook ID "
                << "Not Found...";
    }
    system("pause");

    // Close the file
    file.close();
    file1.close();
    remove("D://book.txt");
    rename("D://book1.txt",
        "D://book.txt");
}

// Function for the bookshop record
void bookShopRecord() {
    int choice;
    char x;
    MyBookstore b;

    while (1) {

        b.showMenu();
        cout << "\n\nEnter your choice : ";
        cin >> choice;
        switch (choice) {

        case 1:
            do {

                b.addBook();
                cout << "\n\nWant to add"
                    << " another book? "
                    << "(y/n) : ";
                cin >> x;
            } while (x == 'y');
            break;

        case 2:
            b.displayBooks();
            break;

        case 3:
            b.checkBook();
            break;
        case 4:
            b.updateBook();
            break;

        case 5:
            b.deleteBook();
            break;

        case 6:
            exit(0);
            break;

        default:
            cout << "\n\nINVALID CHOICE\n";
        }
    }
}

// Driver Code
int main() {
    // Function Call
    bookShopRecord();

    return 0;
}
